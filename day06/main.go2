package main

import (
	"fmt"
	// "slices"
	"strconv"
	"strings"

	"github.com/manhdv2103/aoc-2024/aoc"
	"github.com/manhdv2103/aoc-2024/utils"
)

const PART = "1"
const WILL_SUBMIT = false

type point struct {
	x int
	y int
}

func solveP1(input string) string {
	obsts, guard, mapWidth, mapHeight := parseInput(input)

	obstXs := make(map[int][]int)
	obstYs := make(map[int][]int)
	for _, obst := range obsts {
		obstXs[obst.x] = append(obstXs[obst.x], obst.y)
		obstYs[obst.y] = append(obstYs[obst.y], obst.x)
	}

	fmt.Println(obstXs, obstYs, guard)

	total := 1
	direction := point{0, -1}
	for true {
		obstPositions := obstXs[guard.y]
		guardPos := guard.x
		mapSize := mapWidth
		if direction.y != 0 {
			obstPositions = obstYs[guard.x]
			guardPos = guard.y
			mapSize = mapHeight
		}

		newGuardPos := 0
		ahead, behind := binarySearchBetween(obstPositions, guardPos)
		fmt.Println(direction, ahead, behind)
		if direction.x == -1 || direction.y == -1 {
			if behind == -1 {
				total += guardPos
				break
			}

			newGuardPos = behind + 1
		} else {
			if ahead == -1 {
				total += mapSize - guardPos
				break
			}

			newGuardPos = ahead - 1
		}

		total += utils.AbsInt(newGuardPos - guardPos)
		direction = rotate(direction)
	}

	return strconv.Itoa(total)
}

func solveP2(input string) string {
	parseInput(input)

	return ""
}

// arr sorted, no negative values
func binarySearchBetween(arr []int, target int) (ahead int, behind int) {
	ahead = -1
	behind = -1
	low := 0
	high := len(arr) - 1

	for low <= high {
		mid := (low + high) / 2
		val := arr[mid]

		if val > target {
			if mid == 0 {
				ahead = val
				break
			}

			if arr[mid-1] < target {
				ahead = val
				behind = arr[mid-1]
				break
			}

			high = mid - 1
		} else {
			if mid == len(arr)-1 {
				behind = val
				break
			}

			if arr[mid+1] > target {
				ahead = arr[mid+1]
				behind = val
				break
			}

			low = mid + 1
		}
	}

	return ahead, behind
}

func rotate(pos point) point {
	return point{-pos.y, pos.x}
}

func parseInput(input string) (obstructions []point, startPoint point, mapWidth int, mapHeight int) {
	// obstructions = make(map[point]bool)

	for y, line := range strings.Split(strings.TrimSpace(input), "\n") {
		for x, pos := range line {
			if pos == '#' {
				obstructions = append(obstructions, point{x, y})
			}

			if pos == '^' {
				startPoint = point{x, y}
			}
		}

		mapWidth = len(line)
		mapHeight++
	}

	return obstructions, startPoint, mapWidth, mapHeight
}

func main() {
	aoc.Process(solveP1, solveP2, PART, WILL_SUBMIT)
}
